#! /bin/sh
set -e

# Generate event-config.h from config.h.
# Invoke like so (from the Makefile):
#
#  $(SHELL) $(srcdir)/make-event-config.sh $(SED) \
#    $(srcdir)/include config.h include/event2/event-config.h
#
# i.e. the arguments are the autoconf-probed sed to use, the directory
# containing all files that refer to event-config.h, the input
# config.h, and the desired name of the output file, in that order.

if [ $# -ne 4 ]; then
    printf 'usage: %s <sed> <includedir> <input> <output>\n' "$0" >&2
    exit 2
fi

sed="$1"
includedir="$2"
infile="$3"
outfile="$4"
outfileT="$4"T

# First compute the list of macros that should be (potentially) defined by
# event-config.h.  This is all C identifiers that begin with "EVENT__" that
# appear in any ".h" file below $includedir, except those that begin with
# EVENT__LIST_ or EVENT__TAILQ_.

conversion=`mktemp "${TMPDIR-/tmp}/mecXXXXXX"`
trap "rm -f $conversion" 0

find "$includedir" -name '*.h' -print |
    xargs cat |
    tr -cs 'A-Za-z0-9_' '\012' |
    "$sed" -e '/^EVENT__/!d' -e '/^EVENT__LIST_/d' -e '/^EVENT__TAILQ_/d' |
    sort -u |
    "$sed" -e \
      's:^EVENT__\([A-Za-z0-9_]*\)$:s/^#define \1 /#define EVENT__\1 /p:' \
  > "$conversion"

# EVENT____func__ is required by code generated by event_rpcgen.py (which
# cannot use config.h) but does not appear in the static headers.
printf '%s\n' 's/^#define __func__ /#define EVENT____func__ /p' \
  >> "$conversion"

{
    printf '%s\n\n' '/* event2/event-config.h
 *
 * This file contains configuration macros required by libevent'\''s headers.
 * It was generated by make-event-config.sh from config.h, which was itself
 * generated by configure.
 *
 * DO NOT EDIT THIS FILE.  If it is wrong, fix make-event-config.sh and/or
 * configure.ac, and rebuild libevent.
 *
 * Do not rely on macros in this file existing in later versions.
 */

#ifndef EVENT2_EVENT_CONFIG_H_INCLUDED_
#define EVENT2_EVENT_CONFIG_H_INCLUDED_'

    # LIBEVENT_VERSION(_NUMBER) are special cases because we want them
    # first in the generated file and because they don't appear anywhere
    # in the static headers.

    "$sed" -n < "$infile" \
        -e 's/^#define VERSION /#define LIBEVENT_VERSION /p' \
        -e 's/^#define NUMERIC_VERSION /#define LIBEVENT_VERSION_NUMBER /p'

    printf '\n'

    "$sed" -n -f "$conversion" < "$infile"

    printf '\n#endif /* event2/event-config.h */\n'

} > "$outfileT"

# This is apparently the most portable way to find out whether two
# files are identical (per an autoconf-2.69-generated 'config.status').
# It also detects a $outfile that doesn't exist yet.

if diff "$outfile" "$outfileT" > /dev/null 2>&1; then
    printf '%s is unchanged\n' "$outfile"
    rm -f "$outfileT"
else
    mv -f "$outfileT" "$outfile"
fi
exit 0
